@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Collections.Generic;
@using System.Linq;
@using AppSettingsConverter.Json
@using AppSettingsConverter.Model

@page "/AppToLocalSettings"

<h4>Convert AppSettings To LocalSettings</h4>

<div>
    <div style="width:50%; height:100%; float:left;">
        <textarea id="beforeChange"
                  @oninput="OnChnage"
                  @bind="ConvertBeforeMessage"
                  placeholder="Input Your AppSettings JSON"
                  Style="width:95%; height: 90vh; margin:5px;" />
    </div>
    <div style="width:50%; height:100%; float:left;">
        <textarea id="afterChange"
                  @bind="ConvertMessage"
                  readonly
                  disabled
                  Style="width:100%; height: 90vh; margin:5px;" />
    </div>
    <div style="clear: both;"></div>
</div>

@code {
    private string ConvertBeforeMessage { get; set; }
    private string ConvertMessage { get; set; }

    public void OnChnage(ChangeEventArgs e)
    {
        ConvertMessage = ConvertAppSettingsToLocalFlat(e.Value.ToString());
    }

    public static string ConvertAppSettingsToLocalFlat(string json)
    {
        if (string.IsNullOrEmpty(json)) return string.Empty;

        try
        {
            var result = JToken.Parse(json);

            if (result.Type == JTokenType.Array)
            {
                var jsonList = JsonConvert.DeserializeObject<List<AzureAppSettingsModel>>(json);
                var items = new JObject();
                jsonList.ForEach(x => items.Add(x.Name, x.Value));
                return JsonConvert.SerializeObject(items, Formatting.Indented);
            }
            else if (result.Type == JTokenType.Object)
            {
                var singleJson = JsonConvert.DeserializeObject<AzureAppSettingsModel>(json);
                return JsonConvert.SerializeObject(
                    new JObject
                    {
                        { singleJson.Name, singleJson.Value }
                    }, Formatting.Indented);
            }
        }
        catch
        {
            return $"This is unsupported Json Format!!";
        }

        return string.Empty;
    }
}