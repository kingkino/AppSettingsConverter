@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Collections.Generic;
@using System.Linq;
@using AppSettingsConverter.Json
@using AppSettingsConverter.Model

@page "/AppToLocalSettings"

<h4>Convert AppSettings To LocalSettings</h4>

<div>
    <strong>FormatSettings : </strong>
    @foreach (var item in new string[] { "Flat", "Structure" })
    {
        <input type="radio" name="FormatSettings" id="@item" value="@item" @onchange="RadioSelection" checked=@(_radioValue.ToString().Equals(item,StringComparison.OrdinalIgnoreCase)) />
        <label for="@item">@item</label>
    }
</div>

<div>
    <div style="width:50%; height:100%; float:left;">
        <textarea id="beforeChange"
                  @oninput="OnChnage"
                  placeholder="Input Your AppSettings JSON"
                  Style="width:95%; height: 90vh; margin:5px;" />
    </div>
    <div style="width:50%; height:100%; float:left;">
        <textarea id="afterChange"
                  @bind="ConvertMessage"
                  readonly
                  disabled
                  Style="width:100%; height: 90vh; margin:5px;" />
    </div>
    <div style="clear: both;"></div>
</div>

@code {
    private string ConvertBeforeMessage { get; set; }
    private string ConvertMessage { get; set; }
    private string _radioValue = "Flat";

    public void RadioSelection(ChangeEventArgs e)
    {
        if (e.Value.ToString().Equals("Flat", StringComparison.OrdinalIgnoreCase))
        {
            ConvertMessage = ConvertAppSettingsToLocalFlat(ConvertBeforeMessage);
        }
        else if (e.Value.ToString().Equals("Structure", StringComparison.OrdinalIgnoreCase))
        {
            ConvertMessage = ConvertAppSettingsToLocalFlat(ConvertBeforeMessage);
        }
        else
        {}
    }

    public void OnChnage(ChangeEventArgs e)
    {
        if (_radioValue.Equals("Flat", StringComparison.OrdinalIgnoreCase))
        {
            ConvertMessage = ConvertAppSettingsToLocalFlat(e.Value.ToString());
        }
        else if (_radioValue.Equals("Structure", StringComparison.OrdinalIgnoreCase))
        {
            ConvertMessage = ConvertAppSettingsToLocalStructure(e.Value.ToString());
        }
        else
        {}
    }

    public static string ConvertAppSettingsToLocalFlat(string json)
    {
        if (string.IsNullOrEmpty(json)) return string.Empty;

        try
        {
            var result = JToken.Parse(json);

            if (result.Type == JTokenType.Array)
            {
                var jsonList = JsonConvert.DeserializeObject<List<AzureAppSettingsModel>>(json);
                var items = new JObject();
                jsonList.ForEach(x => items.Add(x.Name, x.Value));
                return JsonConvert.SerializeObject(items, Formatting.Indented);
            }
            else if (result.Type == JTokenType.Object)
            {
                var singleJson = JsonConvert.DeserializeObject<AzureAppSettingsModel>(json);
                return JsonConvert.SerializeObject(
                    new JObject
                    {
                        { singleJson.Name, singleJson.Value }
                    }, Formatting.Indented);
            }
        }
        catch
        {
            return $"This is unsupported Json Format!!";
        }

        return string.Empty;
    }

    public static string ConvertAppSettingsToLocalStructure(string json)
    {
        if (string.IsNullOrEmpty(json)) return string.Empty;

        try
        {
            var outputItems = JsonConvert.DeserializeObject<List<OutputItem>>(json);
            var result = JsonFieldsConverter.ConvertToJToken(outputItems);
            string jsonString = result.ToString(Formatting.None);
            return jsonString;
        }
        catch
        {
            return $"This is unsupported Json Format!!";
        }

        return string.Empty;
    }
}